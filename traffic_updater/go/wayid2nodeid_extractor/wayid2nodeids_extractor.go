package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"log"
	"math/rand"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/qedus/osmpbf"
)

const telenavNavigableWaySuffix string = "100"

func generateWayid2nodeidsMapping(input, output string) {
	infile, err := os.Open(input)
	defer infile.Close()
	if err != nil {
		log.Fatal(err)
		fmt.Printf("Open pbf file of %v failed.\n", input)
		return
	}
	fmt.Printf("Open pbf file of %s succeed.\n", input)

	outfile, err := os.OpenFile(output, os.O_RDWR|os.O_CREATE, 0755)
	defer outfile.Close()
	defer outfile.Sync()
	if err != nil {
		log.Fatal(err)
		fmt.Printf("Open output file of %s failed.\n", output)
		return
	}
	fmt.Printf("Open output file of %s succeed.\n", output)

	wayid2nodeids(infile, outfile)
}

func wayid2nodeids(infile io.Reader, outfile io.Writer) {
	// Init extractor
	extractor := osmpbf.NewDecoder(infile)
	extractor.SetBufferSize(osmpbf.MaxBlobSize)
	err := extractor.Start(runtime.GOMAXPROCS(-1))
	if err != nil {
		log.Fatal(err)
		return
	}

	// Init loader
	loader := bufio.NewWriter(outfile)
	defer loader.Flush()

	var wc, nc uint32
	var preWayid, preNodeid int64
	for {
		if v, err := extractor.Decode(); err == io.EOF {
			break
		} else if err != nil {
			log.Fatal(err)
		} else {
			switch v := v.(type) {
			case *osmpbf.Node:
			case *osmpbf.Way:
				wayidstr := strconv.FormatUint((uint64)(v.ID), 10)
				if !isNavigableWay(wayidstr) {
					continue
				}
				wayidstr = trimNavigableWaySuffix(wayidstr)
				wayid, err := strconv.ParseInt(wayidstr, 10, 64)
				if err != nil {
					fmt.Printf("Incorrect wayid generated internally.")
				}

				// Transform
				//str := convertWayObj2MockSpeed(v, wayid)
				str := generateIdMappingString(v.NodeIDs,
					wayid,
					preNodeid,
					preWayid)

				_, err = loader.WriteString(str)
				if err != nil {
					log.Fatal(err)
					return
				}
				wc++
				nc += (uint32)(len(v.NodeIDs))
				preNodeid, preWayid = v.NodeIDs[0], wayid

			case *osmpbf.Relation:
			default:
				log.Fatalf("unknown type %T\n", v)
			}
		}
	}

	fmt.Printf("Total ways: %d, total nodes: %d\n", wc, nc)
}

// This optimization is for telenav internal pbf only
// User need manully set flags.istelenavpbf = true to enable this
// Telenav PBF add "100" for all navigable ways
func isNavigableWay(wayidstr string) bool {
	if flags.istelenavpbf {
		if strings.HasSuffix(wayidstr, telenavNavigableWaySuffix) {
			return true
		} else {
			return false
		}
	} else {
		return true
	}
}

// Remove "100" suffix for telenav ways, other components such as telenav traffic
// already remove it
func trimNavigableWaySuffix(wayidstr string) string {
	if flags.istelenavpbf {
		return strings.TrimSuffix(wayidstr, telenavNavigableWaySuffix)
	}
	return wayidstr
}

func convertWayObj2IdMappingString(v *osmpbf.Way, wayid int64) string {
	// format: wayid,nodeid1,nodeid2, ...
	return strconv.FormatInt(wayid, 10) + "," +
		strings.Trim(strings.Join(strings.Fields(fmt.Sprint(v.NodeIDs)), ","), "[]") +
		"\n"
}

func generateIdMappingString(nodeids []int64, wayid int64,
	preNodeID int64, preWayID int64) string {
	var str string
	str += strconv.FormatInt((wayid-preWayID), 10) + ","

	for i, n := range nodeids {
		str += strconv.FormatInt((n - preNodeID), 10)
		if i < (len(nodeids) - 1) {
			str += ","
		}
		preNodeID = n
	}
	str += "\n"

	return str
}

func convertWayObj2MockSpeed(v *osmpbf.Way, wayid int64) string {
	// format: wayid,random speed
	return strconv.FormatInt(wayid, 10) + "," +
		strconv.Itoa(rand.Intn(100)) +
		"\n"
}

var flags struct {
	input        string
	output       string
	istelenavpbf bool
}

func init() {
	flag.StringVar(&flags.input, "i", "", "Input pbf file.")
	flag.StringVar(&flags.output, "o", "", "Output csv file")
	flag.BoolVar(&flags.istelenavpbf, "b", false, "Is pbf generated by telenav internally")
}

func main() {
	flag.Parse()

	if len(flags.input) == 0 || len(flags.output) == 0 {
		fmt.Printf("[ERROR]Input or Output file path is empty.\n")
		return
	}

	startTime := time.Now()
	generateWayid2nodeidsMapping(flags.input, flags.output)
	endTime := time.Now()
	fmt.Printf("Total processing time for wayid2nodeids-extract takes %f seconds\n", endTime.Sub(startTime).Seconds())
}
