#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Flow(object):
    """
    Attributes:
     - fromId
     - toId
     - wayId
     - speed
     - trafficLevel
    """


    def __init__(self, fromId=None, toId=None, wayId=None, speed=None, trafficLevel=None,):
        self.fromId = fromId
        self.toId = toId
        self.wayId = wayId
        self.speed = speed
        self.trafficLevel = trafficLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.fromId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.toId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.wayId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.trafficLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Flow')
        if self.fromId is not None:
            oprot.writeFieldBegin('fromId', TType.I64, 1)
            oprot.writeI64(self.fromId)
            oprot.writeFieldEnd()
        if self.toId is not None:
            oprot.writeFieldBegin('toId', TType.I64, 2)
            oprot.writeI64(self.toId)
            oprot.writeFieldEnd()
        if self.wayId is not None:
            oprot.writeFieldBegin('wayId', TType.I64, 3)
            oprot.writeI64(self.wayId)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.DOUBLE, 4)
            oprot.writeDouble(self.speed)
            oprot.writeFieldEnd()
        if self.trafficLevel is not None:
            oprot.writeFieldBegin('trafficLevel', TType.I32, 5)
            oprot.writeI32(self.trafficLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fromId is None:
            raise TProtocolException(message='Required field fromId is unset!')
        if self.toId is None:
            raise TProtocolException(message='Required field toId is unset!')
        if self.wayId is None:
            raise TProtocolException(message='Required field wayId is unset!')
        if self.speed is None:
            raise TProtocolException(message='Required field speed is unset!')
        if self.trafficLevel is None:
            raise TProtocolException(message='Required field trafficLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Flow)
Flow.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fromId', None, None, ),  # 1
    (2, TType.I64, 'toId', None, None, ),  # 2
    (3, TType.I64, 'wayId', None, None, ),  # 3
    (4, TType.DOUBLE, 'speed', None, None, ),  # 4
    (5, TType.I32, 'trafficLevel', None, None, ),  # 5
)
fix_spec(all_structs)
del all_structs
