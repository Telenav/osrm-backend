package meta

import (
	"testing"
)

func TestSuccessWrite(t *testing.T) {
	cases := []struct {
		p []byte
		n Num
	}{
		{[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 0},
		{[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}, 0},
		{[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}, 0},

		{[]byte{0xdc, 0x6d, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00}, 1142236},
		{[]byte{0xdc, 0x6d, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11}, 1142236},

		{[]byte{0xaa, 0x95, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00}, 169386},
		{[]byte{0xaa, 0x95, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF}, 169386},
	}

	for _, c := range cases {
		var n Num
		wroteLen, err := n.Write(c.p)
		if err != nil {
			t.Error(err)
		}
		if wroteLen != numBytes {
			t.Errorf("expect write %d bytes but got %d", numBytes, wroteLen)
		}
		if n != c.n {
			t.Errorf("expect num %d from %v but got %d", c.n, c.p, n)
		}
	}
}

func TestFailWrite(t *testing.T) {
	cases := []struct {
		p []byte
	}{
		{[]byte{}},
		{[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	}

	for _, c := range cases {
		var n Num
		_, err := n.Write(c.p)
		if err == nil {
			t.Errorf("expect write error from %v but succeed", c.p)
		}
	}

}
