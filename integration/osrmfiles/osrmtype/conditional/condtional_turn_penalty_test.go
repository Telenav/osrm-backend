package conditional

import (
	"reflect"
	"testing"

	"github.com/Telenav/osrm-backend/integration/osrmfiles/osrmtype"
)

func TestTurnPenaltiesWrite(t *testing.T) {

	cases := []struct {
		p                []byte
		expectParseBytes uint64
		TurnPenalties
	}{
		{
			[]byte{
				0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x08, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xca, 0xa5, 0x28, 0x02, 0x16, 0x67, 0x21, 0xf9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x14, 0xbb,
				0xa2, 0x03, 0x00, 0x00, 0x01, 0x0e, 0x14, 0xbb, 0x56, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x7a, 0x09, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xa5, 0x28, 0x02,
				0x0c, 0x67, 0x21, 0xf9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x14, 0xbb, 0xa2, 0x03, 0x00, 0x00,
				0x01, 0x0e, 0x14, 0xbb, 0x56, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x3e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			160,
			TurnPenalties{
				[]TurnPenalty{
					TurnPenalty{
						TurnOffset:      1378540,
						Coordinate:      osrmtype.Coordinate{FixedLon: -115251434, FixedLat: 36218314},
						conditionsCount: 1,
						Conditions: []OpeningHours{
							{
								Modifier:   1,
								timesCount: 1,
								Times: []TimeSpan{
									{
										FromEvent:   1,
										FromMinutes: 930,
										ToEvent:     1,
										ToMinutes:   1110,
									},
								},
								weekdaysCount: 1,
								Weekdays: []WeekdayRange{
									{
										Weekydays:         62,
										OvernightWeekdays: 124,
									},
								},
								monthdaysCount: 0,
								Monthdays:      []MonthdayRange{},
							},
						},
					},
					TurnPenalty{
						TurnOffset:      1378682,
						Coordinate:      osrmtype.Coordinate{FixedLon: -115251444, FixedLat: 36218131},
						conditionsCount: 1,
						Conditions: []OpeningHours{
							{
								Modifier:   1,
								timesCount: 1,
								Times: []TimeSpan{
									{
										FromEvent:   1,
										FromMinutes: 930,
										ToEvent:     1,
										ToMinutes:   1110,
									},
								},
								weekdaysCount: 1,
								Weekdays: []WeekdayRange{
									{
										Weekydays:         62,
										OvernightWeekdays: 124,
									},
								},
								monthdaysCount: 0,
								Monthdays:      []MonthdayRange{},
							},
						},
					},
				},
				2,
				[]byte{},
				160,
			},
		},
		{
			[]byte{
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x96, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x59, 0xfe, 0x87, 0x02, 0x16, 0x7d, 0x0b, 0xfb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6e, 0x79, 0xe3,
				0xa4, 0x01, 0x00, 0x00, 0x01, 0x6e, 0x79, 0xe3, 0xe0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x6e, 0x79, 0xe3, 0x48, 0x03, 0x00, 0x00, 0x01, 0x6e, 0x79, 0xe3, 0x84, 0x03, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			144,
			TurnPenalties{
				[]TurnPenalty{
					TurnPenalty{
						TurnOffset:      12097213,
						Coordinate:      osrmtype.Coordinate{FixedLon: -83133162, FixedLat: 42466905},
						conditionsCount: 2,
						Conditions: []OpeningHours{
							{
								Modifier:   1,
								timesCount: 1,
								Times: []TimeSpan{
									{
										FromEvent:   1,
										FromMinutes: 420,
										ToEvent:     1,
										ToMinutes:   480,
									},
								},
								weekdaysCount: 1,
								Weekdays: []WeekdayRange{
									{
										Weekydays:         62,
										OvernightWeekdays: 124,
									},
								},
								monthdaysCount: 1,
								Monthdays: []MonthdayRange{
									{
										From: Monthday{
											Year:  0,
											Month: 9,
											Day:   0,
										},
										To: Monthday{
											Year:  0,
											Month: 6,
											Day:   0,
										},
									},
								},
							},
							{
								Modifier:   1,
								timesCount: 1,
								Times: []TimeSpan{
									{
										FromEvent:   1,
										FromMinutes: 840,
										ToEvent:     1,
										ToMinutes:   900,
									},
								},
								weekdaysCount:  0,
								Weekdays:       []WeekdayRange{},
								monthdaysCount: 0,
								Monthdays:      []MonthdayRange{},
							},
						},
					},
				},
				1,
				[]byte{},
				144,
			},
		},
	}

	for _, c := range cases {
		conditionalTurnPenalties := New()
		_, err := conditionalTurnPenalties.Write(c.p)
		if err != nil {
			t.Error(err)
		}

		err = conditionalTurnPenalties.Validate(c.expectParseBytes)
		if err != nil {
			t.Error(err)
		}

		if !reflect.DeepEqual(conditionalTurnPenalties, c.TurnPenalties) {
			t.Errorf("Write TurnPenalties, expect %+v but got %+v", c.TurnPenalties, conditionalTurnPenalties)
		}
	}
}
